<?php
class Consultation extends CI_Model
{
	//save($data['diagnoses'],$data["complaints"], $patient_id,$consultant_id)
	function save($diagnoses,$complaints,$obst_gyn,$medical_history,$family_history,$examination,$patient_id, $encounter_status, $consultant_id,$consultation_type='general')
	{
		if ( !$this->Customer->exists($patient_id) )
			return -1;
		if ( !$this->Customer->check_encounter($patient_id) )
			return -1;

		$encounter_id = $this->Customer->update_encounter($patient_id, $encounter_status, $this->Customer->check_encounter($patient_id));
			
		$consultation_data = array(
			'consultation_time' => date('Y-m-d H:i:s'),
			'patient_id'=> $patient_id,
			'consultant_id'=>$consultant_id,
			'consultation_complaints'=>serialize($complaints),
			'consultation_obst_gyn'=>serialize($obst_gyn),
			'consultation_medical_history'=>serialize($medical_history),
			'consultation_family_history'=>serialize($family_history),
			'consultation_examination'=>serialize($examination),
			'consultation_type'=>$consultation_type,
			'encounter_id'=>$encounter_id,
		);

		//Run these queries as a transaction, we want to make sure we do all or nothing
		$this->db->trans_start();
		
		if ($this->returning($patient_id,$consultant_id)){
			$consultation_id = $this->returning($patient_id,$consultant_id);
			
			$this->db->where('consultation_id',$consultation_id);
			$this->db->update('consultation',$consultation_data);
			
			$this->db->where('consultation_id', $consultation_id);
			$this->db->delete("consultation_diagnosis");
		}
		else{
			$this->db->insert('consultation',$consultation_data);
			$consultation_id = $this->db->insert_id();
		}
		
		foreach($diagnoses as $line=>$item)
		{
			$diagnoses_data = array
			(
				'consultation_id'=>$consultation_id,
				'diagnosis_code'=>$item['diagnosis_code'],
				'primary'=>$item['primary']
			);
			
			$this->db->insert('consultation_diagnosis',$diagnoses_data);

		}
		
		$this->db->trans_complete();
		
		if ($this->db->trans_status() === FALSE)
		{
			return -1;
		}
		
		return $consultation_id;
	}
	
	function discharge($consultation_id,$patient_id=null,$consultant_id=null,$department=null)
	{
		$consultation_data = array(
			'consultation_status'=>3
		);
		$this->db->where('consultation_id',$consultation_id);
		$this->db->update('consultation',$consultation_data);
		
		if ($patient_id && $consultant_id){
			if ($this->referred($patient_id,$consultant_id,$department)){
				$referral_id = $this->referral_id($patient_id,$consultant_id,$department);
				$this->db->where('referral_id',$referral_id);
				$this->db->set('referral_consultation',$consultation_id);
				$this->db->set('referral_status','1');
				$this->db->update('consultation_referral');
			}
		}

	}
	
	function returning($patient_id,$consultant_id=null,$department=null)
	{
		$this->db->from('consultation');
		$this->db->where('patient_id',$patient_id);
		if($consultant_id){
			$this->db->where('consultant_id',$consultant_id);
			//if($department)$this->db->or_where('consultation_type',$department);
		}
		$this->db->where('consultation_status !=','3');
		$consultation = $this->db->get()->row()->consultation_id;
		return $consultation;
	}
	
	function get_diagnosis_search_suggestions_consultation($search,$limit=25)
	{
		$suggestions = array();
		
		$this->db->from('consultation_icd10');
		$this->db->like("diagnosis_code",$search);
		$this->db->where("classification !=",'N');
		$this->db->order_by("diagnosis_code", "asc");		
		$by_code = $this->db->get();
		foreach($by_code->result() as $row)
		{
			$suggestions[]=$row->diagnosis_code.'|'.$row->description;		
		}
		
		$this->db->from('consultation_icd10');
		$this->db->like("description",$search);
		$this->db->where("classification !=",'N');
		$this->db->order_by("diagnosis_code", "asc");		
		$by_name = $this->db->get();
		foreach($by_name->result() as $row)
		{
			$suggestions[]=$row->diagnosis_code.'|'.$row->description;
		}
		
		
		//only return $limit suggestions
		if(count($suggestions > $limit))
		{
			$suggestions = array_slice($suggestions, 0,$limit);
		}
		return $suggestions;

	}
	
	function get_customer_search_suggestions_consultation($search,$limit=25)
	{
		$suggestions = array();
		
		$this->db->from('customers');
		$this->db->join('people','customers.person_id=people.person_id');
		$this->db->join('triage','customers.person_id=triage.patient_id');		
		$this->db->where("(first_name LIKE '%".$this->db->escape_like_str($search)."%' or 
		last_name LIKE '%".$this->db->escape_like_str($search)."%' or middle_name LIKE '%".$this->db->escape_like_str($search)."%' or 
		CONCAT(`first_name`,' ',`last_name`) LIKE '%".$this->db->escape_like_str($search)."%') and deleted=0");
		$this->db->order_by("last_name", "asc");		
		$by_name = $this->db->get();
		foreach($by_name->result() as $row)
		{
			$suggestions[]=$row->person_id.'|'.$row->first_name.' '.$row->last_name;		
		}
		
		$this->db->from('customers');
		$this->db->join('people','customers.person_id=people.person_id');
		$this->db->join('triage','customers.person_id=triage.patient_id');	
		$this->db->where('deleted',0);		
		$this->db->like("customers.person_id",str_ireplace("MLKH","",$search));
		$this->db->order_by("customers.person_id", "asc");		
		$by_person_id = $this->db->get();
		foreach($by_person_id->result() as $row)
		{
			$suggestions[]=$row->person_id.'|'.$this->Appconfig->get('patient_prefix').$row->person_id;
		}
		
		$this->db->from('customers');
		$this->db->join('people','customers.person_id=people.person_id');
		$this->db->join('triage','customers.person_id=triage.patient_id');	
		$this->db->where('deleted',0);		
		$this->db->like("account_number",$search);
		$this->db->order_by("account_number", "asc");		
		$by_account_number = $this->db->get();
		foreach($by_account_number->result() as $row)
		{
			$suggestions[]=$row->person_id.'|'.$row->account_number;
		}
		
		$this->db->from('customers');
		$this->db->join('people','customers.person_id=people.person_id');
		$this->db->join('triage','customers.person_id=triage.patient_id');	
		$this->db->where('deleted',0);		
		$this->db->like("national_id",$search);
		$this->db->order_by("national_id", "asc");		
		$by_national_id = $this->db->get();
		foreach($by_national_id->result() as $row)
		{
			$suggestions[]=$row->person_id.'|'.$row->national_id;		
		}

		//only return $limit suggestions
		if(count($suggestions > $limit))
		{
			$suggestions = array_slice($suggestions, 0,$limit);
		}
		return $suggestions;

	}
	
	function get_refer_doctor_suggestions($search,$department=null)
	{
		$suggestions = array();
		
		$this->db->from('employees');
		$this->db->join('people','employees.person_id=people.person_id');
		$this->db->join('department','department.department_id=employees.department_id');
		if($department)$this->db->where('department_name',$department);
		$this->db->where("(first_name LIKE '%".$this->db->escape_like_str($search)."%' or 
		last_name LIKE '%".$this->db->escape_like_str($search)."%' or middle_name LIKE '%".$this->db->escape_like_str($search)."%' or 
		CONCAT(`first_name`,' ',`last_name`) LIKE '%".$this->db->escape_like_str($search)."%') and deleted=0");
		$this->db->order_by("last_name", "asc");		
		$by_name = $this->db->get();
		foreach($by_name->result() as $row)
		{
			$suggestions[]=$row->person_id.'|'.$row->first_name.' '.$row->last_name;		
		}
		
		//only return $limit suggestions
		if(count($suggestions > $limit))
		{
			$suggestions = array_slice($suggestions, 0,$limit);
		}
		return $suggestions;
	}
	
	function get_diagnosis_info ($diagnosis_code)
	{
		$this->db->from('consultation_icd10');
		$this->db->where('diagnosis_code',$diagnosis_code);
		
		$query = $this->db->get();

		if($query->num_rows()==1)
		{
			return $query->row();
		}
		else
		{
			//Get empty base parent object, as $item_id is NOT an item
			$item_obj=new stdClass();

			//Get all the fields from items table
			$fields = $this->db->list_fields('items');

			foreach ($fields as $field)
			{
				$item_obj->$field='';
			}

			return $item_obj;
		}
	}
	
	function get_complaints($patient_id,$consultant_id)
	{
		$this->db->from('consultation');
		$this->db->where('patient_id',$patient_id);
		$this->db->where('consultant_id',$consultant_id);
		$this->db->where('consultation_status !=','3');
		$complaints = $this->db->get()->row()->consultation_complaints;
		
		return unserialize($complaints);
	}
	
	function get_obst_gyn($patient_id,$consultant_id)
	{
		$this->db->from('consultation');
		$this->db->where('patient_id',$patient_id);
		$this->db->where('consultant_id',$consultant_id);
		$this->db->where('consultation_status !=','3');
		$obst_gyn = $this->db->get()->row()->consultation_obst_gyn;
		
		return unserialize($obst_gyn);
	}
	
	function get_medical_history($patient_id,$consultant_id)
	{
		$this->db->from('consultation');
		$this->db->where('patient_id',$patient_id);
		$this->db->where('consultant_id',$consultant_id);
		$this->db->where('consultation_status !=','3');
		$medical_history = $this->db->get()->row()->consultation_medical_history;
		
		return unserialize($medical_history);
	}
	
	function get_family_history($patient_id,$consultant_id)
	{
		$this->db->from('consultation');
		$this->db->where('patient_id',$patient_id);
		$this->db->where('consultant_id',$consultant_id);
		$this->db->where('consultation_status !=','3');
		$family_history = $this->db->get()->row()->consultation_family_history;
		
		return unserialize($family_history);
	}
	
	function get_examination($patient_id,$consultant_id)
	{
		$this->db->from('consultation');
		$this->db->where('patient_id',$patient_id);
		$this->db->where('consultant_id',$consultant_id);
		$this->db->where('consultation_status !=','3');
		$examination = $this->db->get()->row()->consultation_examination;
		
		return unserialize($examination);
	}
	
	function get_diagnoses($patient_id,$consultant_id)
	{
		$this->db->from('consultation');
		$this->db->join('consultation_diagnosis', 'consultation.consultation_id = consultation_diagnosis.consultation_id', $type = 'INNER');
		$this->db->where('patient_id',$patient_id);
		$this->db->where('consultant_id',$consultant_id);
		$this->db->where('consultation_status !=','3');
		
		return $this->db->get();
	}
	
	function get_status($consultation_id)
	{
		$this->db->from('consultation');
		$this->db->where('consultation_id',$consultation_id);
		$this->db->where('consultation_status !=','3');
		
		return $this->db->get()->row()->consultation_status;
	}
	
	function save_request ($items,$customer_id,$employee_id,$comment,$total,$department,$opd_services=null)
	{
		if(count($items)==0)
			return -1;

		//Alain Multiple payments
		//Build payment types string

		$invoices_data = array(
			'invoice_time' => date('Y-m-d H:i:s'),
			'customer_id'=> $this->Customer->exists($customer_id) ? $customer_id : null,
			'employee_id'=>$employee_id,
			'amount'=>$total,
			'department'=>$department,
			'opd_plaster_of_paris'=>$opd_services[0],
			'opd_stitching'=>$opd_services[1],
			'opd_dressing'=>$opd_services[2],
			'opd_injection'=>$opd_services[3],
			'comment'=>$comment,
			'consultation_id'=> $this->returning($customer_id,$employee_id),
		);
		
		//Run these queries as a transaction, we want to make sure we do all or nothing
		$this->db->trans_start();
		
		if ($this->returning($customer_id,$employee_id)){
			$consultation_id = $this->returning($customer_id,$employee_id);
			$status = $this->get_status($consultation_id);
			
			switch($status)
			{
				case '0':
					if($department == "Lab") $status = '101';
					else if ($department == "X-Ray") $status = '110';
				break;
				case '101':
					if ($department == "X-Ray") $status = '111';
				break;
				case '110':
					if ($department == "Lab") $status = '111';
				break;
				case '102':
					if ($department == "X-Ray") $status = '112';
					else if ($department == "Lab") $status = '101';
				break;
				case '120':
					if ($department == "X-Ray") $status = '110';
					else if ($department == "Lab") $status = '121';
				break;
				case '112':
					if ($department == "Lab") $status = '111';
				break;
				case '121':
					if ($department == "X-Ray") $status = '111';
				break;
				case '122':
					if ($department == "X-Ray") $status = '112';
					else if ($department == "Lab") $status = '121';
				break;
			}
			$consultation_data = array(
				'consultation_status'=>$status
			);
		
			$this->db->where('consultation_id',$consultation_id);
			$this->db->update('consultation',$consultation_data);
		}
		
		if ($this->already_invoiced($customer_id,$department)){
			$invoice_id = $this->already_invoiced($customer_id,$department);
			$this->db->where('invoice_id', $invoice_id);
			$this->db->update('invoices',$invoices_data);
			
			$this->db->where('invoice_id', $invoice_id);
			$this->db->delete("invoices_items");
		}
		else{
			$this->db->insert('invoices',$invoices_data);
			$invoice_id = $this->db->insert_id();
		}


		foreach($items as $line=>$item)
		{
			$cur_item_info = $this->Item->get_info($item['item_id']);

			$invoices_items_data = array
			(
				'invoice_id'=>$invoice_id,
				'item_id'=>$item['item_id'],
				'line'=>$item['line'],
				'description'=>$item['description'],
				'serialnumber'=>$item['serialnumber'],
				'quantity_purchased'=>$item['quantity'],
				'item_cost_price' => $cur_item_info->cost_price,
				'item_unit_price'=>$item['price']
			);
			
			$this->db->insert('invoices_items',$invoices_items_data);

		}
		$this->db->trans_complete();
		
		if ($this->db->trans_status() === FALSE)
		{
			return -1;
		}
		
		return $invoice_id;
	}
	
	function already_invoiced($customer_id,$department)
	{
		$this->db->from('invoices');
		$this->db->where(array('customer_id'=>$customer_id,'department'=>$department,'processed'=>'0'));
		$invoice_id = $this->db->get()->row()->invoice_id;
		return $invoice_id;
	}
	
	function get_invoice($customer_id,$department,$employee_id=0)
	{
		if ($employee_id)
			$where = array('customer_id'=>$customer_id,'department'=>$department,'processed'=>'0','employee_id'=>$employee_id);
		else 
			$where = array('customer_id'=>$customer_id,'department'=>$department,'processed'=>'0');
		$this->db->from('invoices_items');
		$this->db->join('invoices', 'invoices.invoice_id = invoices_items.invoice_id', $type = 'INNER');
		$this->db->where($where);
		return $this->db->get();
	}
	
	function check_invoice($customer_id,$department)
	{
		$this->db->from('invoices');
		$this->db->where(array('customer_id'=>$customer_id,'department'=>$department,'processed'=>'1'));
		
		return $this->db->get()->row()->invoice_id;
	}
	
	function get_lab_report($patient_id)
	{
		$this->db->from('invoices');
		$this->db->where(array('customer_id'=>$patient_id,'processed'=>'2','department'=>'Lab'));
		//$this->db->join('people','invoices.employee_id=people.person_id');
		$this->db->order_by("invoice_time", "desc");
		$invoice_id = $this->db->get()->row()->invoice_id;
		$this->db->from('invoices_items');
		$this->db->where('invoice_id',$invoice_id);
		return $this->db->get()->result_array();
	}
	
	function get_xray_report($patient_id)
	{
		$this->db->from('invoices');
		$this->db->where(array('customer_id'=>$patient_id,'processed'=>'2','department'=>'X-Ray'));
		//$this->db->join('people','invoices.employee_id=people.person_id');
		$this->db->order_by("invoice_time", "desc");
		$invoice_id = $this->db->get()->row()->invoice_id;
				
		$this->db->from('invoices_items');
		$this->db->where('invoice_id',$invoice_id);
		return $this->db->get()->result_array();
	}
	
	function preview_lab_report($consultation_id)
	{
		$this->db->from('invoices');
		$this->db->where(array('consultation_id'=>$consultation_id,'processed'=>'2','department'=>'Lab'));
		$this->db->join('invoices_items','invoices_items.invoice_id=invoices.invoice_id');	
		$this->db->order_by("invoice_time", "desc");
		return $this->db->get()->result_array();
	}
	
	function preview_xray_report($consultation_id)
	{
		$this->db->from('invoices');
		$this->db->where(array('consultation_id'=>$consultation_id,'processed'=>'2','department'=>'X-Ray'));
		$this->db->join('invoices_items','invoices_items.invoice_id=invoices.invoice_id');
		$this->db->order_by("invoice_time", "desc");
		return $this->db->get()->result_array();
	}
	
	function get_main_queue($clinic="general")
	{
		$this->db->from('encounter');
		//$this->db->join('triage','triage.encounter_id=encounter.encounter_id');
		$this->db->where('encounter_status', "1");
		$this->db->where('encounter_type', "$clinic");
		//$this->db->order_by("priority", "asc");
		$this->db->order_by("encounter.encounter_id", "asc");
		$this->db->limit(10);
		return $this->db->get()->result_array();
	}
	
	function get_lab_queue($consultant_id,$clinic=null)
	{
		$this->db->from('consultation');
		$this->db->where('consultant_id', $consultant_id);
		//if($clinic)$this->db->or_where('consultation_type', $clinic);
		$status = array('101', '102', '111', '121', '122', '112');
		$this->db->where_in('consultation_status', $status);
		$this->db->order_by("consultation_status", "desc");
		$this->db->order_by("consultation_time", "asc");
		$this->db->limit(5);
		return $this->db->get()->result_array();
	}
	
	function get_xray_queue($consultant_id,$clinic=null)
	{
		$this->db->from('consultation');
		$this->db->where('consultant_id', $consultant_id);
		//if($clinic)$this->db->or_where('consultation_type', $clinic);
		$status = array('110', '120', '111', '121', '122', '112');
		$this->db->where_in('consultation_status', $status);
		$this->db->order_by("consultation_status", "desc");
		$this->db->order_by("consultation_time", "asc");
		$this->db->limit(5);
		return $this->db->get()->result_array();
	}
	
	function get_employee_clinic($consultant_id){
		$this->db->from('employees');
		$this->db->join('department','employees.department_id=department.department_id');
		$this->db->join('outpatient_services','outpatient_services.department_id=department.department_id');
		$this->db->where('person_id', $consultant_id);
		return $this->db->get()->row()->opd_service_abv;
	}
	
	function get_history($patient_id,$limit=100, $offset=0)
	{
		$this->db->from('consultation');
		$this->db->join('people','consultation.consultant_id=people.person_id');	
		$this->db->where('patient_id',$patient_id);
		$this->db->where('consultation_status',3);		
		$this->db->order_by("consultation_time", "desc");
		$this->db->limit($limit);
		$this->db->offset($offset);
		return $this->db->get();	
	}
	
	function count_history($patient_id)
	{
		$this->db->from('consultation');
		$this->db->where('patient_id',$patient_id);
		$this->db->where('consultation_status',3);
		return $this->db->count_all_results();
	}
	
	function get_consultation_summary($consultation_id)
	{
		$this->db->from('consultation');
		$this->db->where('consultation_id',$consultation_id);
		return $this->db->get();
	}
	
	function get_consultation_diagnoses($consultation_id)
	{
		$this->db->from('consultation_diagnosis');
		//$this->db->join('consultation_icd10','consultation_diagnosis.diagnosis_code=consultation_icd10.diagnosis_code');
		$this->db->where('consultation_id',$consultation_id);
		$this->db->order_by("diagnosis_code", "desc");
		return $this->db->get()->result_array();
	}
	
	/*
	Get all the outpatient services
	*/
	public function get_outpatient_services()
	{
		$this->db->from('outpatient_services');
		$q=$this->db->get();
		if ($q->num_rows() > 0) {
			foreach ($q->result_array() as $row) {
				$data[$row['opd_service_abv']] = $row['opd_service_name'];
			}
			return $data;
		}
	}

	public function save_allocation($encounter_data)
	{
		$encounter_id = $this->Customer->check_encounter($encounter_data['patient_id']);
		
		$this->db->trans_start();
		if ($encounter_id){
			$this->db->where('encounter_id', $encounter_id);
			$this->db->update('encounter', $encounter_data);	
		}
		else $this->db->insert('encounter', $encounter_data);
		
		$this->db->where('queue_customer_id',$encounter_data['patient_id']);
		$this->db->delete('admission_queue');
		
		$this->db->trans_complete();
		if ($this->db->trans_status() == FALSE) {
			return false;
		} else {
			return true;
		}
		///logic to detect if is previous customer is not here and i am not sure if it should be added
		/// for now a new encounter is inseted every time
	}
	
	function get_referral_queue($consultant_id,$department_id=null)
	{
		$this->db->from('consultation_referral');
		$this->db->join('consultation','consultation.consultation_id=consultation_referral.consultation_id');
		$this->db->where('referral_status', 0);
		if($department_id)$this->db->where("(referral_doctor = '$consultant_id' OR referral_department ='$department_id')");
		else $this->db->where("referral_doctor",$consultant_id);
		$this->db->order_by("referral_id", "asc");
		$this->db->order_by("consultation_time", "asc");
		$this->db->limit(5);
		return $this->db->get()->result_array();
	}
	
	function referred($patient_id,$consultant_id,$department=null)
	{
		$this->db->from('consultation_referral');
		$this->db->join('consultation','consultation.consultation_id=consultation_referral.consultation_id');
		$this->db->where('patient_id', $patient_id);
		$this->db->where('referral_status', 0);
		if($department_id)$this->db->where("(referral_doctor = '$consultant_id' OR referral_department ='$department_id')");
		else $this->db->where("referral_doctor",$consultant_id);
		
		return $this->db->get()->row()->consultation_id;
	}
	
	function referral_id($patient_id,$consultant_id,$department=null)
	{
		$this->db->from('consultation_referral');
		$this->db->join('consultation','consultation.consultation_id=consultation_referral.consultation_id');
		$this->db->where('patient_id', $patient_id);
		$this->db->where('referral_status', 0);
		if($department_id)$this->db->where("(referral_doctor = '$consultant_id' OR referral_department ='$department_id')");
		else $this->db->where("referral_doctor",$consultant_id);
		
		return $this->db->get()->row()->referral_id;
	}
	
	function save_referral($referral_data,$patient_id,$consultant_id)
	{
		$return=false;
		if ($this->returning($patient_id,$consultant_id)){
			$consultation_id = $this->returning($patient_id,$consultant_id);
			$referral_data["consultation_id"] = $consultation_id;
		}
		$this->db->trans_start();
		
		$this->db->where('consultation_id',$consultation_id);
		$this->db->set('consultation_referral','1');
		$this->db->update('consultation');
		
		$this->db->insert('consultation_referral',$referral_data);
		$return = true;
		$this->db->trans_complete();
		return $return;
	}
	
	function get_returned_referral_queue($consultant_id)
	{
		$this->db->from('consultation_referral');
		$this->db->join('consultation','consultation.consultation_id=consultation_referral.consultation_id');
		$this->db->where('consultant_id', $consultant_id);
		$this->db->where('consultation_status !=', "3");
		$this->db->where('referral_status', 1);
		$this->db->order_by("referral_id", "asc");
		$this->db->order_by("consultation_time", "asc");
		$this->db->limit(5);
		return $this->db->get()->result_array();
	}
	
	function returned_referral($patient_id,$consultant_id)
	{
		$this->db->from('consultation_referral');
		$this->db->join('consultation','consultation.consultation_id=consultation_referral.consultation_id');
		$this->db->where('consultant_id', $consultant_id);
		$this->db->where('patient_id', $patient_id);
		$this->db->where('referral_status', 1);
		
		return $this->db->get()->row()->referral_consultation;
	}
}
?>
